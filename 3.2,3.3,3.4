#3.2 nombres de variables
juan = "juan"
ju_an = "juan"
_ju_an = "Juan"
juAn = "Juan"
JUAN = "juan"
juan2 = "Juan"
"""
Nombres de variables ilegales:
2myvar = "John"
my-var = "John"
my var = "John"
"""

#3.3 asignacion de multiples valores\
a, b, c = "Juli", "Lyn", "Andres"
print(a)
print(b)
print(c)

"""
Un valor para múltiples variables
Y puedes asignar el mismo valor a múltiples variables en una línea:
"""
x = y = z = "Juan"
print(x)
print(y)
print(z)
=
"""
Desempaquetar una colección
Si tienes una colección de valores en una lista, tupla, etc.,
Python te permite extraer los valores en variables. Esto se llama desempaquetar .
"""
Zorras = ["Lyn", "Celis", "Alexa"]
x, y, z = Zorras
print(x)
print(y)
print(z)

#3.4 variables de salida

j = "hoy es un lindo dia"
print(j)

"""
En la print()función, se generan múltiples variables, separadas por una coma:
"""
j = "juan"
p = "esta"
z = "feliz"
print(j, p, z)

"""
También puedes utilizar el +operador para generar múltiples variables:
"""
a = "juan "
b = "esta "
c = "feliz"
print(a + b + c)

"""
Para los números, el +carácter funciona como un operador matemático:
"""
x = 5
y = 10
print(x + y)

"""
La mejor manera de generar múltiples variables en la print()función
es separarlas con comas, que incluso admiten diferentes tipos de datos:
"""
x = 30
y = "Juan"
print(x, y)
